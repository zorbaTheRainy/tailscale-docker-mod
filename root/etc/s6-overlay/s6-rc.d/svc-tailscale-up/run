#!/usr/bin/with-contenv bash

# -------------------------------------------
is_true() {
    local var_value=$(eval echo \$$1)
    case "${var_value,,}" in
        1|true|t) return 0 ;;
        *) return 1 ;;
    esac
}
# -------------------------------------------

# Run iptables and capture the output and exit status
output=$(iptables 2>&1)
status=$?

# Check if the command failed and if the specific error message is present
if [ $status -ne 0 ]; then
    echo "Error detected: iptables failed with the output $output"

    # Check if iptables-legacy exists
    if ! command -v iptables-legacy &> /dev/null; then
        echo "iptables-legacy not found, installing..."
        if [ -f /usr/bin/apt ]; then
            apt-get update
            apt-get install -y iptables-legacy
        elif [ -f /sbin/apk ]; then
            apk add iptables-legacy
        fi
    fi

    # Create symbolic link
    if command -v iptables-legacy &> /dev/null; then
        iptables_path=$(command -v iptables)
        iptables_legacy_path=$(command -v iptables-legacy)
        if [ -n "$iptables_path" ]; then
            echo "Creating symbolic link..."
            sudo ln -sf "$iptables_legacy_path" "$iptables_path"
            echo "Symbolic link created."
        else
            echo "iptables not found."
        fi
    fi

else
    echo "iptables command succeeded "
fi

FLAGS=""

# configure `tailscale up`
if ! [ -v TAILSCALE_AUTHKEY ]; then
    echo '[!] TAILSCALE_AUTHKEY is not defined, this will print a login URL to the screen'
else
    FLAGS="${FLAGS} --authkey=${TAILSCALE_AUTHKEY}"
fi

if [ -v TAILSCALE_HOSTNAME ]; then
    echo '[!] setting tailscale hostname'
    FLAGS="${FLAGS} --hostname=${TAILSCALE_HOSTNAME}"
fi

if is_true "TAILSCALE_USE_SSH" ; then
    echo '[!] allowing SSH server'
    FLAGS="${FLAGS} --ssh=${TAILSCALE_USE_SSH}"
fi

if is_true "TAILSCALE_BE_EXIT_NODE"; then
    echo '[!] acting as an exit node, you may need to approve this in the admin console'
    FLAGS="${FLAGS} --advertise-exit-node=${TAILSCALE_BE_EXIT_NODE}"
fi

if [ -v TAILSCALE_LOGIN_SERVER ]; then
    echo '[!] Using a custom login server'
    FLAGS="${FLAGS} --login-server=${TAILSCALE_LOGIN_SERVER}"
fi

if is_true "TAILSCALE_STATEFUL_FILTERING" ; then
    echo '[!] inbound packets with another node destination IP are dropped (stateful filtering)'
    FLAGS="${FLAGS} --stateful-filtering"
fi

if [ -v TAILSCALE_FURTHER_FLAGS ]; then
    echo '[!] adding additional flags to `tailscale up`'
    FLAGS="${FLAGS} ${TAILSCALE_FURTHER_FLAGS}"
fi

tailscale up $FLAGS

# configure serve or funnel
if [ -v TAILSCALE_SERVE_PORT ] && [ -v TAILSCALE_SERVE_MODE ]; then
    if is_true "TAILSCALE_FUNNEL" ; then
        echo '[!] enabling Tailsclae Funnel'
        tailscale funnel --bg --"${TAILSCALE_SERVE_MODE}"=443 http://localhost:"${TAILSCALE_SERVE_PORT}"
    else
        echo '[!] enabling Tailsclae Serve mode'
        tailscale serve --bg --"${TAILSCALE_SERVE_MODE}"=443 http://localhost:"${TAILSCALE_SERVE_PORT}"
    fi
else
    echo '[!] clearing any Tailsclae Server/Funnel options'
    tailscale serve reset
    tailscale funnel reset 
fi

# set auto-update
if is_true "TAILSCALE_AUTO_UPDATE" ; then
    echo '[!] Setting up auto-updating of tailscale'
    tailscale update -yes
fi
